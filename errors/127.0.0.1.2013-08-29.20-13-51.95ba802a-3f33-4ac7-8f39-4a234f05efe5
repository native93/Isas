(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'images'"
p3
sS'layer'
p4
S'/home/nazrul/web2py/applications/isas/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n#########################a################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n#def login():\n#    form=SQLFORM_factory(db.Field(\'username\',\'string\',requires=IS_NOT_EMPTY()),\n#                       db.Field(\'password\',\'password\',requires=IS_NOT_EMPTY()))\n#    if form.accepts(request.vars,session):\n#        x=db((db.admin.username==form.vars.username)&(db.auth_admin.password==form.vars.password)).select()\n#        y=db((db.student.username==form.vars.username)&(db.student.password==form.vars.password)).select()\n#    elif form.errors:\n#        response.flash=\'Errors in form\'\n#    return dict(form=form)\nfrom gluon import current\nauth.settings.register_next=URL(\'student_details\')\n#if auth.settings.membership==\'admin\':\n#\tauth.settings.login_next = URL(\'admin_interface\')\n#else:\n#\tauth.settings.login_next = URL(\'index\')\ndef groupadd(check_group):\n\t\tif not db(db.auth_group.role==check_group).count():\n\t\t\t\tdb.auth_group.insert(role=check_group)\n@auth.requires_login()\ndef student_details():\n    groupadd(\'students\')\n    auth.add_membership(auth.id_group(\'students\'),session.user_id)\n    session.user_id=auth.user.id\n    session.user_name=auth.user.first_name\n    form=SQLFORM.factory(\n        Field(\'roll_no\',\'integer\',length=9,requires=IS_NOT_EMPTY()),\n        Field(\'year_join\',length=4,requires=IS_NOT_EMPTY()),\n        Field(\'full_name\',\'string\',requires=IS_NOT_EMPTY()),\n        Field(\'branch\',requires=IS_IN_SET([\'CSD\',\'CSE\',\'ECE\',\'ECD\',\'EHD\',\'CLD\',\'CND\'])))\n    if form.accepts(request.vars,session):\n        db.student_det.insert(user_id=auth.user.id,roll_no=form.vars.roll_no,year_join=form.vars.year_join,full_name=form.vars.full_name, branch=form.vars.branch)\n        redirect(URL(\'index\'))\n    elif form.errors:\n        response.flash="errors in forms"\n    return dict(form=form)\nimport datetime\n@auth.requires_login()    \ndef index():\n    session.user_id=auth.user.id\n    session.user_name=auth.user.first_name\n    if auth.has_membership(role=\'admin\'):\n        #var=1\n        redirect(URL(\'admin_interface\'))\n    s=db(db.timing.id>0).select(db.timing.from_1,db.timing.to_1)\n    s=s[0]\n    f=0\n    if (datetime.datetime.now()>s.from_1)&(datetime.datetime.now()<s.to_1):\n        f=1\n    else:\n        f=0\n\tyear=db(db.student_det.user_id==auth.user.id).select(db.student_det.year_join)\n\tyear=int(year[0].year_join)\n\tx=2*(datetime.date.today().year-year)\n\tmon=datetime.date.today().month\n\tif mon>=1 and mon<=7:\n\t\tsession.sem=x\n\telse:\n\t\tsession.sem=x+1\n\tif session.sem>8:\n\t\tsession.sem=8\n    #print var\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to Isas portal!!")\n    return dict(f=f)\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef admin_interface():\n    #form=SQLFORM.factory(\n     #   Field(\'options\',requires=IS_IN_SET([\'timing\']),widget=SQLFORM.widgets.radio.widget))\n    #if form.accepts(request.vars,session):\n     #   if request.vars.options==\'timing\':\n      #      redirect(URL(\'portal_timing\'))\n    return dict()\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef portal_timing():\n#    form=SQLFORM(db.timing)\n    form=SQLFORM.factory(\n        Field(\'from_1\',\'datetime\',requires=IS_NOT_EMPTY(),label="From"),\n        Field(\'to_1\',\'datetime\',requires=IS_NOT_EMPTY(),label="To"))\n    if form.accepts(request.vars,session):\n        #s=db(db.timing.id>0).select()\n        if db(db.timing.id>0).count():\n            s=db(db.timing.id>0).select(db.timing.id)\n            s=s[0]\n            db(db.timing.id==s).update(from_1 = form.vars.from_1,to_1 = form.vars.to_1)\n        else:\n            db.timing.insert(from_1=form.vars.from_1,to_1=form.vars.to_1)\n        response.flash=T("timing updated")\n    elif form.errors:\n        response.flash="errors in forms"  \n    return dict(form=form)\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef add_grades():\n     form=SQLFORM.factory(\n     Field(\'course_id\',db.course,requires=IS_IN_DB(db,\'course.id\',\'course.name\')))\n     if form.accepts(request.vars,session):\n         redirect(URL(\'add_grades_1\',args=form.vars.course_id))\n     elif form.errors:\n         response.flash="Errors in form!! "\n     return dict(form=form) \n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef add_grades_1():\n    course_id=request.args(0)\n    stu=db((course_id==db.grade.course_id)&(db.grade.student_id==db.student_det.user_id))\n    name=db(course_id==db.course.id).select(db.course.name)\n    name=name[0]\n    form=SQLFORM.factory(\n        Field(\'student_id\',db.student_det,requires=IS_IN_DB(stu,\'student_det.user_id\',\'student_det.full_name\')),\n        Field(\'grade\',requires=IS_IN_SET([\'A\',\'A-\',\'B\',\'B-\',\'C\',\'C-\',\'D\',\'F\'])))\n    if form.accepts(request.vars,session):\n         db((db.grade.student_id==form.vars.student_id)&(db.grade.course_id==course_id)).update(grade=form.vars.grade)\n         response.flash="Grade Updated"\n    elif form.errors:\n         response.flash="Errors in form!! "\n    return dict(form=form,name=name)\n@auth.requires_login()\n@auth.requires_membership(\'admin\')\ndef add_courses():\n    form=SQLFORM(db.course)\n    if form.accepts(request.vars,session):\n        response.flash="Course added Successfully"\n    elif form.errors:\n        response.flash="Errors in form!! "\n    return dict(form=form)\n@auth.requires_login()\ndef register():\n     #   if form.accepts(request.vars,session) :\n     #       response.flash=\'Entry recorded !!\'\n     #   elif form.errors:\n     #       response.flash=\'Error in forms !! Please fill it again\'\n\tcourses=db(db.course.id>0).select(db.course.name,db.course.code,db.course.credits,db.course.id)\n        #myrecords=db(db.grade.id>0).select(db.course)\n\tcourses_reg=db((auth.user.id==db.grade.student_id)).select(db.grade.course_id,db.grade.grade)\n\t#courses_reg=courses_reg[0]\n\tsession.list_courses=[]\n\tif request.vars:\n\t\tfor i in courses:\n\t\t\tid1=str(i.id)\n                #session.c=len(request.vars.values())\n\t\t\tif request.vars[id1]:\n                    #session.a=request.vars.values()\n\t\t\t\tvalue=request.vars[id1]#[\'%r\'%i.id]#[i.id]\n                    #session.d=value\n\t\t\t\tif value=="Yes":\n                       #session.b=1\n\t\t\t\t\tsession.list_courses.append(i.id)\n\t\tredirect(URL(\'show_courses\'))\n     #elif form.errors:\n      #   response.flash=\'Error in forms !! Please fill it again\'\n\treturn dict(courses=courses,courses_reg=courses_reg)\nimport datetime                  \n@auth.requires_login()\ndef show_courses():\n    #courses=[]\n    year=db(db.student_det.user_id==auth.user.id).select(db.student_det.year_join)\n    year=int(year[0].year_join)\n    x=2*(datetime.date.today().year-year)\n    mon=datetime.date.today().month\n    if (mon>=1) and (mon<=7):\n        session.sem=x\n    else:\n        session.sem=x+1\n    if session.sem>8:\n        session.sem=8\n    courses_reg=db((auth.user.id==db.grade.student_id)).select(db.grade.course_id)\n    l=[]\n    for i in courses_reg:\n        l.append(i.course_id)\n    for i in session.list_courses:\n        if i not in l:\n            db.grade.insert(student_id=auth.user.id,course_id=i,sem=session.sem)\n        else:\n            db((db.grade.student_id==auth.user.id)&(db.grade.course_id==i)).update(grade=None,sem=session.sem)\n    courses=db((db.grade.student_id==auth.user.id)&(db.course.id==db.grade.course_id)&(db.grade.sem==session.sem)).select(db.course.name)\n       # courses.append(str(course[\'name\']))\n    #courses=db(db.course.id==session.list_courses).select(db.course.name)\n    return dict(courses=courses)\n@auth.requires_login()\ndef view_grades():\n\tgrd=db((auth.user.id==db.grade.student_id)&(db.course.id==db.grade.course_id)&(db.grade.sem==session.sem)).select(db.course.name,db.grade.grade,db.course.credits)\n\tdet=db((auth.user.id==db.student_det.user_id)).select(db.student_det.full_name,db.student_det.branch,db.student_det.roll_no)\n\tgrd1=db((auth.user.id==db.grade.student_id)&(db.course.id==db.grade.course_id)).select(db.course.name,db.grade.grade,db.course.credits)\n\tdet=db((auth.user.id==db.student_det.user_id)).select(db.student_det.full_name,db.student_det.branch,db.student_det.roll_no)\n\tdet=det[0]\n\tc,tc=0.0,0\n\tfor i in grd:\n\t\t\tif(i.grade.grade==\'A\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*10\n\t\t\telif i.grade.grade==\'A-\':\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*9\n\t\t\telif(i.grade.grade==\'B\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*8\n\t\t\telif(i.grade.grade==\'B-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*7\n\t\t\telif(i.grade.grade==\'C\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*6\n\t\t\telif(i.grade.grade==\'C-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*5\n\t\t\telif(i.grade.grade==\'D\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*4\n\t\t\telif(i.grade.grade==\'F\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*3\n\tyear=db(db.student_det.user_id==auth.user.id).select(db.student_det.year_join)\n\tyear=int(year[0].year_join)\n\tx=2*(datetime.date.today().year-year)\n\tmon=datetime.date.today().month\n\tif (mon>=1) and (mon<=7):\n\t\tsession.sem=(x)\n\telse:\n\t\tsession.sem=(x+1)\n\tif session.sem>8:\n\t\tsession.sem=8\n\tsg=0\n\tif(c==0):\n\t\tsg="N.A"\n\telse:\n\t\tsg="%0.2f"%float(c/tc)\n\tsession.s=sg\n\tfor i in grd1:\n\t\t\tif(i.grade.grade==\'A\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*10\n\t\t\telif i.grade.grade==\'A-\':\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*9\n\t\t\telif(i.grade.grade==\'B\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*8\n\t\t\telif(i.grade.grade==\'B-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*7\n\t\t\telif(i.grade.grade==\'C\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*6\n\t\t\telif(i.grade.grade==\'C-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*5\n\t\t\telif(i.grade.grade==\'D\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*4\n\t\t\telif(i.grade.grade==\'F\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*3\n\tcg=0\n\tif(c==0):\n\t\tcg="N.A"\n\telse:\n\t\tcg="%0.2f"%float(c/tc)\n\tsession.c=cg\n\tl=[]\n\tfor i in range(1,session.sem):\n\t\tl.append(i)\n\tl=set(l)\n\tform=SQLFORM.factory(\n\t\tField(\'sem\',requires=IS_IN_SET(l),widget=SQLFORM.widgets.radio.widget,label="Sems"))\n\tif form.accepts(request.vars,session):\n\t\tredirect(URL(\'view_grades_1\',args=form.vars.sem))\n\treturn dict(grd=grd,det=det,sg=sg,form=form)\n@auth.requires_login()\ndef view_grades_1():\n\tsem=request.args(0)\n\tgrd=db((auth.user.id==db.grade.student_id)&(db.course.id==db.grade.course_id)&(db.grade.sem==sem)).select(db.course.name,db.grade.grade,db.course.credits)\n\tdet=db((auth.user.id==db.student_det.user_id)).select(db.student_det.full_name,db.student_det.branch,db.student_det.roll_no)\n\tdet=det[0]\t\n\tc,tc=0.0,0\n\tfor i in grd:\n\t\t\tif(i.grade.grade==\'A\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*10\n\t\t\telif i.grade.grade==\'A-\':\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*9\n\t\t\telif(i.grade.grade==\'B\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*8\n\t\t\telif(i.grade.grade==\'B-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*7\n\t\t\telif(i.grade.grade==\'C\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*6\n\t\t\telif(i.grade.grade==\'C-\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*5\n\t\t\telif(i.grade.grade==\'D\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*4\n\t\t\telif(i.grade.grade==\'F\'):\n\t\t\t\ttc+=i.course.credits\n\t\t\t\tc+=i.course.credits*3\n\tsg=0\n\tif(c==0):\n\t\tsg="N.A"\n\telse:\n\t\tsg="%0.2f"%float(c/tc)\n\treturn dict(grd=grd,det=det,sg=sg,sem=sem)\n@auth.requires_login()\ndef report_make():\n\tsem=request.args(0)\n\tsg=request.args(1)\n \tgrd=db((auth.user.id==db.grade.student_id)&(db.course.id==db.grade.course_id)&(db.grade.sem==sem)).select(db.course.name,db.grade.grade,db.course.credits)\n\tdet=db((auth.user.id==db.student_det.user_id)).select(db.student_det.full_name,db.student_det.branch,db.student_det.roll_no)\n\tdet=det[0]\n\thtml=response.render(\'default/report.html\',dict(grd=grd,det=det,sg=sg,sem=sem))\n\treturn plugin_appreport.REPORTPISA(html=html)\n@auth.requires_login()\ndef mail_send():\n\t\ts=str(auth.user.email)\n\t\tsem=request.args(0)\n\t\tsg=request.args(1)\n \t\tgrd=db((auth.user.id==db.grade.student_id)&(db.course.id==db.grade.course_id)&(db.grade.sem==sem)).select(db.course.name,db.grade.grade,db.course.credits)\n\t\tdet=db((auth.user.id==db.student_det.user_id)).select(db.student_det.full_name,db.student_det.branch,db.student_det.roll_no)\n\t\tdet=det[0]\n\t\thtml=response.render(\'default/report.html\',dict(grd=grd,det=det,sg=sg,sem=sem))\n\t\tif mail.send(to=[s],\n\t\t\t\tsubject=\'Grades\',\n\t\t\t\tmessage=html):\n\t\t\t\tf=1\n\t\t\t\tresponse.flash=\'Mail Sent\'\n\t\telse:\n\t\t\t\tf=0\n\t\t\t\tresponse.flash=\'Failed\'\n\t\treturn dict(f=f)\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(add_grades_1)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nazrul/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/nazrul/web2py/applications/isas/controllers/default.py", line 402, in <module>\n  File "/home/nazrul/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nazrul/web2py/gluon/tools.py", line 2929, in f\n    return action(*a, **b)\n  File "/home/nazrul/web2py/gluon/tools.py", line 2929, in f\n    return action(*a, **b)\n  File "/home/nazrul/web2py/applications/isas/controllers/default.py", line 123, in add_grades_1\n    name=db(course_id==db.course.id).select(db.course.name)\n  File "/home/nazrul/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/nazrul/web2py/gluon/dal.py", line 2146, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/nazrul/web2py/gluon/dal.py", line 1618, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/nazrul/web2py/gluon/dal.py", line 1478, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/nazrul/web2py/gluon/dal.py", line 1311, in expand\n    return op(first, second)\n  File "/home/nazrul/web2py/gluon/dal.py", line 1239, in EQ\n    self.expand(second, first.type))\n  File "/home/nazrul/web2py/gluon/dal.py", line 1321, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/nazrul/web2py/gluon/dal.py", line 1746, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'images\'\n'
p11
s.